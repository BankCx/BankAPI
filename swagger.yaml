openapi: 3.0.0
info:
  title: Bank of Checkmarx API
  description: |
    API for the Bank of Checkmarx demo application
    
    ## Authentication
    This API uses JWT Bearer token authentication. To authenticate:
    1. Use the `/api/v1/login` endpoint with your username and password
    2. Include the returned token in the Authorization header as `Bearer <token>`
    
    ## Security Notice
    This is a demo application with intentionally vulnerable endpoints for security testing purposes.
  version: 1.0.0
  contact:
    name: Bank of Checkmarx
    email: support@bankofcheckmarx.com

tags:
  - name: 1. Authentication
    description: Login and authentication mechanisms
  - name: 2. Accounts
    description: View and manage account information
  - name: 3. File Operations
    description: File processing and uploads
  - name: 4. Network Operations
    description: Network utilities (ping)
  - name: 5. User Content
    description: User-submitted content (comments)

servers:
  - url: http://172.35.1.192:8000
    description: Production server
  - url: http://localhost:8000
    description: Development server

paths:
  /api/v1/login:
    post:
      tags:
        - 1. Authentication
      summary: User login
      description: Authenticate user and return JWT token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request data
        '401':
          description: Invalid credentials

  /api/v1/accounts/{account_id}:
    get:
      tags:
        - 2. Accounts
      summary: Get account by ID
      description: Retrieve account details by account ID
      operationId: getAccountById
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
          example: "ACC123456"
        - $ref: '#/components/parameters/AuthorizationHeader'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '401':
          description: Unauthorized - Invalid or missing token
        '404':
          description: Account not found

  /api/v1/process-file:
    post:
      tags:
        - 3. File Operations
      summary: Process file content
      description: Read and return the contents of a file from the server
      operationId: processFile
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessFileRequest'
      responses:
        '200':
          description: File content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessFileResponse'
        '401':
          description: Unauthorized - Invalid or missing token
        '500':
          description: Error processing file

  /api/v1/ping:
    post:
      tags:
        - 4. Network Operations
      summary: Ping network host
      description: Execute ping command against a specified host
      operationId: pingHost
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingRequest'
      responses:
        '200':
          description: Ping executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '401':
          description: Unauthorized - Invalid or missing token
        '500':
          description: Error executing ping command

  /api/v1/comment:
    post:
      tags:
        - 5. User Content
      summary: Add comment
      description: Store and return a user comment
      operationId: addComment
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '200':
          description: Comment stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '401':
          description: Unauthorized - Invalid or missing token

  /api/v1/upload:
    post:
      tags:
        - 3. File Operations
      summary: Upload file
      description: Handle file upload and return filename
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadFileRequest'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        '401':
          description: Unauthorized - Invalid or missing token
        '400':
          description: No file provided

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. 
        Include the token in the Authorization header as: `Bearer <your-token>`
        
        To obtain a token, use the `/api/v1/login` endpoint with your username and password.

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      description: Bearer token for authentication. Format: 'Bearer <token>'
      required: true
      schema:
        type: string
        example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: john.doe
        password:
          type: string
          example: password123
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    AccountResponse:
      type: object
      properties:
        account_id:
          type: string
          example: ACC123456
        balance:
          type: number
          format: float
          example: 1000.00
    ProcessFileRequest:
      type: object
      required:
        - file_path
      properties:
        file_path:
          type: string
          description: Path to the file to process
          example: /etc/passwd
    ProcessFileResponse:
      type: object
      properties:
        result:
          type: string
          description: File content
          example: root:x:0:0:root:/root:/bin/bash...
    PingRequest:
      type: object
      properties:
        host:
          type: string
          description: Host to ping
          default: localhost
          example: google.com
    PingResponse:
      type: object
      properties:
        result:
          type: string
          description: Ping command output
          example: |
            PING google.com (142.250.191.78) 56(84) bytes of data...
    CommentRequest:
      type: object
      required:
        - comment
      properties:
        comment:
          type: string
          description: User comment to store
          example: This is a test comment
    CommentResponse:
      type: object
      properties:
        comment:
          type: string
          description: The stored comment
          example: This is a test comment
    UploadFileRequest:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: File to upload
    UploadFileResponse:
      type: object
      properties:
        filename:
          type: string
          description: Name of the uploaded file
          example: document.pdf
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid credentials
    Success:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: Operation completed successfully 